{"version":3,"sources":["components/Card.js","components/CardList.js","components/searchBox.js","containers/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","CardComponent","map","user","i","key","SearchBox","searchField","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mOAaeA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACE,4BAAKL,GACL,2BAAIC,MCSGK,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAK,SAACC,EAAMC,GACvC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIvB,OAAO,6BAAMO,ICAAK,EAZG,SAAC,GAAkC,EAAjCC,YAAkC,IAArBC,EAAoB,EAApBA,eAC/B,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,EAPA,SAAAC,GACb,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACvCH,EAAMI,WCeEC,E,YAlBb,WAAaL,GAAQ,IAAD,8BAClB,4CAAOA,KACFM,MAAQ,CACXC,UAAU,GAHM,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAU,CAACJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACN,0DAGFG,KAAKV,MAAMI,a,GAhBMQ,aCmDbC,G,kBA5Cb,aAAgB,IAAD,8BACb,+CAWFlB,eAAiB,SAAAmB,GACf,EAAKH,SAAU,CAACjB,YAAaoB,EAAMC,OAAOC,SAX1C,EAAKV,MAAQ,CACXnB,OAAQ,GACRO,YAAa,IAJF,E,iFAOO,IAAD,OACnBuB,MAAO,8CACJC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKV,SAAU,CAACxB,OAAQkC,S,+BAOjC,IAAD,OACFC,EAAeZ,KAAKJ,MAAMnB,OAAOoC,QAAQ,SAAAC,GAC7C,OAAOA,EAAM5C,KACV6C,oBACAC,SAAU,EAAKpB,MAAMZ,YAAY+B,wBAEtC,OAAKf,KAAKJ,MAAMnB,OAAOwC,OAQnB,yBAAK5C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,eAAgBe,KAAKf,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUR,OAAQmC,IADpB,OAVJ,yBAAKvC,UAAU,MACb,+C,GA3BQ6B,c,YCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAgB,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.86d5910f.chunk.js","sourcesContent":["import React from 'react';\nconst Card = ({name, email, id}) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  const CardComponent = robots.map ((user, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{CardComponent}</div>;\n};\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchField, onSearchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={onSearchChange}\n      />\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{overflowY: 'scroll', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React, {Component} from 'react';\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch (error, info) {\n    this.setState ({hasError: true});\n  }\n  render () {\n    if (this.state.hasError) {\n      return <h1>oops. Something went wrong</h1>;\n    }\n\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/searchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n// import {robots} from './robots';\nimport './App.css';\nclass App extends Component {\n  constructor () {\n    super ();\n    this.state = {\n      robots: [],\n      searchField: '',\n    };\n  }\n  componentDidMount () {\n    fetch ('https://jsonplaceholder.typicode.com/users')\n      .then (response => response.json ())\n      .then (users => this.setState ({robots: users}));\n  }\n  onSearchChange = event => {\n    this.setState ({searchField: event.target.value});\n    // console.log(filterRobots);\n  };\n\n  render () {\n    const filterRobots = this.state.robots.filter (robot => {\n      return robot.name\n        .toLocaleLowerCase ()\n        .includes (this.state.searchField.toLocaleLowerCase ());\n    });\n    if (!this.state.robots.length) {\n      return (\n        <div className=\"tc\">\n          <h1>Loading...</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox onSearchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filterRobots} />;\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />, document.getElementById ('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister ();\n"],"sourceRoot":""}